package minitwitter.GUI;

import java.awt.Component;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import minitwitter.Observer.Observer;
import minitwitter.Observer.TreeObserver;
import minitwitter.TwitterMessage;
import minitwitter.User;
import minitwitter.UserGroup;
import minitwitter.Visitor.ComponentVisitor;
import minitwitter.Visitor.Visitor;


/**
 * This class represent AdminControlPanel GUI. On this GUI, it can add
 * new users or new user groups, view informations, or open a user view.
 * @author Seungyun Lee
 */
public class AdminControlPanel extends javax.swing.JFrame {

    // Only creating one instance
    private static AdminControlPanel instance;
    private UserGroup rootGroup;
    private ComponentVisitor visitor;
    private Observer treeObserver;
    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode rootNode;
    private User userReference;
    private TwitterMessage twitterMessageReference;
  
    /**
     * This is the constructor to create only one instance of AdminControlPanel.
     */
    private AdminControlPanel() {
        initComponents();
        rootGroup = new UserGroup("Root");
        // User reference to visit user's size
        userReference = new User("userReference");
        // Twitter message reference to visit its size.
        twitterMessageReference = new TwitterMessage("twitterMessageReference", 
                "This is a reference.");
        rootNode = new DefaultMutableTreeNode(rootGroup.getID());
        initalizeTree();
        treeObserver = new TreeObserver(tree, treeModel);
        visitor = new ComponentVisitor();
        rootGroup.accept(visitor);
        rootGroup.attach(treeObserver);        
    }

    /**
     * This method returns the instance of AdminControlPanel.
     * @return instance of AdminControlPanel
     */
    public static AdminControlPanel getInstance() {
        if(instance == null){
            synchronized (AdminControlPanel.class) {
                if(instance == null){
                    instance = new AdminControlPanel();
                }
            }
        }
        return instance;
    }
    
    /**
     * I used NetBeans' drag and drop feature which generates codes that 
     * I cannot modify.
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        treePane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        addUserButton = new javax.swing.JButton();
        addGroupButton = new javax.swing.JButton();
        openUserViewButton = new javax.swing.JButton();
        showUserTotalButton = new javax.swing.JButton();
        showGroupTotalButton = new javax.swing.JButton();
        showMessagesTotalButton = new javax.swing.JButton();
        showPositivePercentageButton = new javax.swing.JButton();
        userIDTextField = new javax.swing.JTextField();
        groupIDTextField = new javax.swing.JTextField();
        warningLabel = new javax.swing.JLabel();
        verifyButton = new javax.swing.JButton();
        lastUpdatedUserButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 400));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treePane.setViewportView(tree);

        addUserButton.setText("Add User");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        addGroupButton.setText("Add Group");
        addGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupButtonActionPerformed(evt);
            }
        });

        openUserViewButton.setText("Open User View");
        openUserViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openUserViewButtonActionPerformed(evt);
            }
        });

        showUserTotalButton.setText("Show User Total");
        showUserTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserTotalButtonActionPerformed(evt);
            }
        });

        showGroupTotalButton.setText("Show Group Total");
        showGroupTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGroupTotalButtonActionPerformed(evt);
            }
        });

        showMessagesTotalButton.setText("Show Messages Total");
        showMessagesTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMessagesTotalButtonActionPerformed(evt);
            }
        });

        showPositivePercentageButton.setText("Show Positive %");
        showPositivePercentageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPositivePercentageButtonActionPerformed(evt);
            }
        });

        userIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        userIDTextField.setToolTipText("");

        groupIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        warningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        verifyButton.setLabel("Verifty IDs");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        lastUpdatedUserButton.setText("Last Updated User");
        lastUpdatedUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastUpdatedUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(treePane, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showMessagesTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showPositivePercentageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showUserTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(showGroupTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(groupIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(openUserViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(verifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lastUpdatedUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(treePane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(groupIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openUserViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showUserTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showGroupTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showMessagesTotalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showPositivePercentageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(verifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(lastUpdatedUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method lets the user to open a user view that the user selected to 
     * view.
     */
    private void openUserViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openUserViewButtonActionPerformed
        warningLabel.setText("");
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) 
                tree.getLastSelectedPathComponent();
        // Checks if nothing is selected
        if (selectedNode != null) {
            String ID = selectedNode.toString();
            rootGroup.findUserGroup(ID);
            UserGroup.getUserGroup();
            boolean isUser = !UserGroup.isFoundUserGroup();
            // Checks if a user is selected
            if (isUser) {
                new UserView(ID, rootGroup);
            } else {
                warningLabel.setText("Select a User");
            }
        } else {
            warningLabel.setText("Select a User");
        }
    }//GEN-LAST:event_openUserViewButtonActionPerformed

    /**
     * This method shows an information dialog with the user size.
     */
    private void showUserTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserTotalButtonActionPerformed
        visitor.visitUser(userReference);
        createDialog("User Total", "User Total: ", visitor.getUserSize() + "");
    }//GEN-LAST:event_showUserTotalButtonActionPerformed

    /**
     * This method shows an information dialog with the user group size.
     */
    private void showGroupTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGroupTotalButtonActionPerformed
        visitor.visitGroup(rootGroup);
        createDialog("Group Total", "Group Total: ", visitor.getUserGroupSize() + "");
    }//GEN-LAST:event_showGroupTotalButtonActionPerformed

    /**
     * This method shows an information dialog with the message size.
     */
    private void showMessagesTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMessagesTotalButtonActionPerformed
        visitor.visitTwitterMessage(twitterMessageReference);
        createDialog("Message Total", "Message Total: ", visitor.getMessageSize() + "");
    }//GEN-LAST:event_showMessagesTotalButtonActionPerformed

    /**
     * This method shows an information dialog with the positive message percentage.
     */
    private void showPositivePercentageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPositivePercentageButtonActionPerformed
        visitor.visitTwitterMessage(twitterMessageReference);
        double positivePercent = 0;
        if (visitor.getMessageSize() > 0) {
           positivePercent = ((visitor.getPositiveMessageSize() * 1.0) / 
                visitor.getMessageSize()) * 100;
        }
        createDialog("Positive %", "Positive %: ", positivePercent + "");
    }//GEN-LAST:event_showPositivePercentageButtonActionPerformed

    /**
     * This method adds a new user.
     */
    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        addElement(userIDTextField, true);       
    }//GEN-LAST:event_addUserButtonActionPerformed

    /**
     * This method adds a new user group.
     */
    private void addGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupButtonActionPerformed
        addElement(groupIDTextField, false);
    }//GEN-LAST:event_addGroupButtonActionPerformed

    private void lastUpdatedUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastUpdatedUserButtonActionPerformed
        visitor.visitUser(userReference);
        System.out.println("Last updated user is " + User.isCheckLastUpdatedUser());
        if (User.isCheckLastUpdatedUser()) {
            String lastUpdatedUserID = visitor.getLastUpdatedUser().getID();
            createDialog("Last Updated User", "ID: ", lastUpdatedUserID);
        } else {
            // When no one is updated
            createDialog("Last Updated User", "ID: ", "NO ONE");
        }
    }//GEN-LAST:event_lastUpdatedUserButtonActionPerformed

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        checkIDs();
        visitor.visitUser(userReference);
        visitor.visitGroup(rootGroup);
        visitor.setNumberOfInvalideID();
        createDialog("Number of Invalide IDs", "Invalid IDs: ", visitor.getNumberOfInvalideID() + "");
        reset();
    }//GEN-LAST:event_verifyButtonActionPerformed
    
    /**
     * This method adds either a new user or a new user group. It does
     * error checking.
     * @param textField, either userIDTextField or userGroupIDTextField  
     * @param isAddUser, true, if add user button is clicked; false, if add user
     *                  group is clicked
     */
    private void addElement(JTextField textField, boolean isAddUser) {
        warningLabel.setText("");
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) 
                tree.getLastSelectedPathComponent();
        // Nothing is selected
        if (selectedNode != null) {
            String selectedID = selectedNode.toString();
            rootGroup.findUserGroup(selectedID);
            UserGroup selectedGroup = UserGroup.getUserGroup();
            // Checks if selected one is a user group
            if (UserGroup.isFoundUserGroup()) {
                if (!textField.getText().trim().equals("")) {
                    String newID = textField.getText();
                    // Check if there is a user/user group with the same ID
                    if (!rootGroup.search(newID)) {
                        // Add user
                        if (isAddUser) {
                            User user = new User(newID);
                            user.setCreationTime(System.currentTimeMillis());
                            user.setLastUpdateTime(0);
                            User.increaseUserSize();
                            DefaultMutableTreeNode newNode = 
                                    new DefaultMutableTreeNode(user.getID());
                            rootGroup.add(user, selectedNode, newNode);
                            textField.setText("");
                        // Add user group
                        } else {
                            UserGroup userGroup = new UserGroup(newID);
                            userGroup.setCreationTime(System.currentTimeMillis());
                            DefaultMutableTreeNode newNode = 
                                new DefaultMutableTreeNode(userGroup.getID());
                            rootGroup.add(userGroup, selectedNode, newNode);
                            textField.setText("");
                        }
                    } else {
                        warningLabel.setText("The ID already exists");
                    }                   
                } else {
                    warningLabel.setText("Enter ID");
                }
            } else {
                warningLabel.setText("Select a Group");
            }
        } else {
            warningLabel.setText("Select a Group");
        }
    }
    
    /**
     * This method creates an information dialog with given information.
     * @param title, title of the information
     * @param message, message of the information
     * @param number, size
     */
    private void createDialog(String title, String message, String number) {
        message = message + number;
        new InformationDialog(title, message);
    }
    
    private void checkIDs() {
        List<String> userIDs = User.getUserIDs();
        for (int i = 0; i < userIDs.size(); ++i) {
            System.out.println(userIDs.get(i));
        }
        List<String> userGroupIDs = UserGroup.getUserGroupIDs();
        for (int i = 0; i < userGroupIDs.size(); ++i) {
            System.out.println(userGroupIDs.get(i));
        }
        rootGroup.checkSpace();
        forLoop(userIDs, userReference);
        forLoop(userGroupIDs, rootGroup);
    }
    
    private void reset() {
        User.reset();
        UserGroup.reset();
    }
    
    private void forLoop(List<String> listIDs, Object obj) {
        for (int i = 0; i < listIDs.size(); ++i) {
            rootGroup.checkDuplicate(listIDs.get(i));
            int numberOfAppearance = 0;
            if (obj instanceof User) {
                numberOfAppearance = User.getNumberOfAppearance();
            } else {
                numberOfAppearance = UserGroup.getNumberOfAppearance();
            }
            numberOfAppearance = numberOfAppearance - 1;
            if (numberOfAppearance != 0) {
                if (obj instanceof User) {
                    User.addNumberOfAppearance(numberOfAppearance);
                } else {
                    UserGroup.addNumberOfAppearance(numberOfAppearance);
                }
            }
            User.resetNumberOfAppearance();
            UserGroup.resetNumberOfAppearance();
        }
    }
    
    /**
     * This method initializes the tree and shows it with the root group first.
     */
    private void initalizeTree() {    
        tree = new JTree(rootNode);
        tree.setCellRenderer(new CustomTreeCellRenderer(rootGroup));
        treeModel = (DefaultTreeModel) tree.getModel();
        treePane.setViewportView(tree);
    }
  
    // I used NetBeans' drag and drop feature which generates codes that 
    // I cannot modify.
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroupButton;
    private javax.swing.JButton addUserButton;
    private javax.swing.JTextField groupIDTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton lastUpdatedUserButton;
    private javax.swing.JButton openUserViewButton;
    private javax.swing.JButton showGroupTotalButton;
    private javax.swing.JButton showMessagesTotalButton;
    private javax.swing.JButton showPositivePercentageButton;
    private javax.swing.JButton showUserTotalButton;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treePane;
    private javax.swing.JTextField userIDTextField;
    private javax.swing.JButton verifyButton;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables

}
